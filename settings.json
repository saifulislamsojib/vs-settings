{
  // window and workbench
  "window.zoomLevel": 1,
  "workbench.colorTheme": "Learn with Sumit - Peace of the eye - Dracula version",
  "workbench.iconTheme": "material-icon-theme",
  "workbench.startupEditor": "none",

  // editor font and other settings
  "editor.fontSize": 22,
  "editor.fontFamily": "Fira Code, Consolas, 'Courier New', monospace",
  "editor.fontLigatures": true,
  "editor.mouseWheelZoom": true,
  "editor.guides.bracketPairs": true,
  "editor.minimap.enabled": false,
  "editor.linkedEditing": true,
  "editor.suggestSelection": "first",

  // editor cursor
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.cursorBlinking": "expand",
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope": "comment",
        "settings": {
          "fontStyle": "italic"
        }
      }
    ]
  },

  // editor code formatting
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "[c]": {
    "editor.defaultFormatter": "ms-vscode.cpptools"
  },
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.fixAll.tslint": true,
    "source.organizeImports": true
  },

  // emmet for react
  "emmet.includeLanguages": {
    "javascript": "javascriptreact"
  },

  // autosave and auto import
  "files.autoSave": "onFocusChange",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "tabnine.experimentalAutoImports": true,
  "diffEditor.ignoreTrimWhitespace": false,
  "security.workspace.trust.untrustedFiles": "open",

  // terminal configurations
  "terminal.integrated.defaultProfile.windows": "Git Bash",
  "terminal.integrated.fontSize": 17,
  "terminal.integrated.fontFamily": "Fira Code, Consolas, 'Courier New', monospace",
  "terminal.integrated.tabs.enabled": true,

  // code runner
  "code-runner.runInTerminal": true,
  "code-runner.saveAllFilesBeforeRun": true,
  "code-runner.terminalRoot": "/",
  "code-runner.executorMap": {
    "c": "mkdir -p $dir/dist && gcc $dir$fileName -o $dir/dist/$fileNameWithoutExt.exe && $dir/dist/$fileNameWithoutExt.exe < input.txt > output.txt",
    "cpp": "mkdir -p $dir/dist && gcc $dir$fileName -o $dir/dist/$fileNameWithoutExt.exe && $dir/dist/$fileNameWithoutExt.exe < input.txt > output.txt"
  },
  
  // c / c++ configs
  "C_Cpp.default.cppStandard": "c++20",
  "C_Cpp.default.cStandard": "c11",

  // Spell checker ignore words
  "cSpell.userWords": [
    "Arif",
    "Bangla",
    "cloudinary",
    "Demra",
    "fibo",
    "fontawesome",
    "fortawesome",
    "noreferrer",
    "preconnect",
    "Roboto",
    "saiful",
    "Sarulia",
    "signup",
    "sojib",
    "Sojib",
    "splitted",
    "Swiper",
    "typeof",
    "youtube"
  ],

  // tailwind CSS
  "tailwindCSS.classAttributes": [
    "class",
    "className",
    "ngClass",
    "activeClassName"
  ],

  // configuration for eslint projects
  "javascript.validate.enable": false,
  "[javascript]": {
    "editor.formatOnSave": false,
    "editor.defaultFormatter": null
  },
  "[javascriptreact]": {
    "editor.formatOnSave": false,
    "editor.defaultFormatter": null
  },
  "[typescript]": {
    "editor.formatOnSave": false,
    "editor.defaultFormatter": null
  },
  "[typescriptreact]": {
    "editor.formatOnSave": false,
    "editor.defaultFormatter": null
  },

  
  
  // user snippets

   // getElementById:
  "getElementById": {
    "prefix": "did",
    "body": ["document.getElementById('$1');"],
    "description": "getElementById"
  },
  // Randon Number:
  "Randon Number": {
    "prefix": "rdn",
    "body": [
      "const randomNumber = Math.floor(Math.random() * ${1:9} + ${2:1});"
    ],
    "description": "Randon Number"
  },
  // arrow Function:
  "arrow Function": {
    "prefix": "af",
    "body": ["const ${1:name} = ($2) => {", "    $0", "};"],
    "description": "arrow Function"
  },

  // express:
  "express": {
    "prefix": "exp",
    "body": [
      "const express = require('express');",
      "const cors = require('cors');",
      "",
      "const app = express();",
      "",
      "app.use(express.json());",
      "app.use(cors());",
      "",
      "const port = 4000;",
      "",
      "app.get('/', (req, res) => {",
      "  res.send('Hello Server!')",
      "});",
      "",
      "app.listen(port, () => {",
      "  console.log(`Example app listening at http://localhost:${1:port}`);",
      "});"
    ],
    "description": "express"
  }
}
